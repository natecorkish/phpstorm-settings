<templateSet group="Laravel">
  <template name="belongsto" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\BelongsTo&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;belongsTo($class$);&#10;}" description="belongsto" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hasone" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\HasOne&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;hasOne($class$);&#10;}" description="hasone" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hasmany" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\HasMany&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;hasMany($class$);&#10;}" description="hasmany" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="belongstomany" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;belongsToMany($class$);&#10;}" description="belongstomany" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hasmanythrough" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\HasOneThrough&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;hasOneThrough($class$);&#10;}" description="hasmanythrough" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="morphto" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\MorphTo&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;morphTo();&#10;}" description="morphto" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="morphone" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\MorphOne&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;morphOne($class$, $name$);&#10;}" description="morphone" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="morphmany" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\MorphMany&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;morphMany($class$, $name$);&#10;}" description="morphmany" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="morphtomany" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\MorphToMany&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;morphToMany($class$, '$name$');&#10;}" description="morphtomany" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="morphedbymany" value="/**&#10; * @return \Illuminate\Database\Eloquent\Relations\MorphToMany&#10; */&#10;public function $name$()&#10;{&#10;    return $this-&gt;morphedByMany($class$, '$name$');&#10;}" description="morphedbymany" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="morphmap" value="Relation::morphMap([&#10;    '$name$' =&gt; $class$,&#10;]);" description="morphmap" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="routekeymap" value="/**&#10;* Get the route key for the model.&#10;*&#10;* @return string&#10;*/&#10;public function getRouteKeyName()&#10;{&#10;    return 'hash';&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="modeldates" value="/**&#10; * The attributes that should be mutated to dates.&#10; *&#10; * @var array&#10; */&#10;protected $dates = [&#10;    'seen_at',&#10;];" description="modeldates" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="modeldateformat" value="/**&#10; * The storage format of the model's date columns.&#10; *&#10; * @var string&#10; */&#10;protected $dateFormat = 'U';`" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="modelcasts" value="/**&#10; * The attributes that should be cast.&#10; *&#10; * @var array&#10; */&#10;protected $casts = [&#10;    '$name$' =&gt; '$type$',&#10;];" description="modelcasts" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="castfile" value="&lt;?php&#10;&#10;namespace App\Casts;&#10;&#10;use Illuminate\Contracts\Database\Eloquent\CastsAttributes;&#10;&#10;class Json implements CastsAttributes&#10;{&#10;    /**&#10;     * Cast the given value.&#10;     *&#10;     * @param  \Illuminate\Database\Eloquent\Model  $model&#10;     * @param  string  $key&#10;     * @param  mixed  $value&#10;     * @param  array  $attributes&#10;     * @return array&#10;     */&#10;    public function get($model, $key, $value, $attributes)&#10;    {&#10;        return json_decode($value, true);&#10;    }&#10;&#10;    /**&#10;     * Prepare the given value for storage.&#10;     *&#10;     * @param  \Illuminate\Database\Eloquent\Model  $model&#10;     * @param  string  $key&#10;     * @param  array  $value&#10;     * @param  array  $attributes&#10;     * @return string&#10;     */&#10;    public function set($model, $key, $value, $attributes)&#10;    {&#10;        return json_encode($value);&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>